#include "stdafx.h"
#include "config.h"

namespace
{
	class CDialogPref : public CDialogImpl<CDialogPref>, public preferences_page_instance, private IListControlOwnerDataSource
	{
	public:
		CDialogPref(preferences_page_callback::ptr callback) : m_callback(callback), m_props(this) {}

		BEGIN_MSG_MAP(CDialogPref)
			MSG_WM_INITDIALOG(OnInitDialog)
			COMMAND_HANDLER_EX(IDC_BTN_IMPORT, BN_CLICKED, OnImportBnClicked)
			COMMAND_HANDLER_EX(IDC_BTN_EXPORT, BN_CLICKED, OnExportBnClicked)
			COMMAND_HANDLER_EX(IDC_BTN_PRESETS, BN_CLICKED, OnPresetsBnClicked)
		END_MSG_MAP()

		enum { IDD = IDD_DIALOG_PREF };

		BOOL OnInitDialog(HWND, LPARAM)
		{
			m_props.CreateInDialog(*this, IDC_LIST_PREFERENCES);

			const auto DPI = m_props.GetDPI();

			m_props.AddColumn("Name", MulDiv(150, DPI.cx, 96));
			m_props.AddColumn("Value", MulDiv(310, DPI.cx, 96));

			return FALSE;
		}

		HWND get_wnd() override
		{
			return m_hWnd;
		}

		t_size get_state() override
		{
			return preferences_state::resettable;
		}

		void LoadProps(bool reset = false)
		{
			if (reset)
			{
				g_config.init_data();
			}

			m_props.ReloadData();
		}

		void OnExportBnClicked(UINT, int, HWND)
		{
			pfc::string8_fast filename;
			if (uGetOpenFileName(m_hWnd, "Configuration files|*.cfg", 0, "cfg", "Save as", nullptr, filename, TRUE))
			{
				pfc::string8_fast content = "# Generated by " JSP_NAME "\r\n";
				for (const auto& [key, value] : g_config.m_data)
				{
					content << key << "=" << value << "\r\n";
				}
				helpers::write_file(filename, content);
			}
		}

		void OnImportBnClicked(UINT, int, HWND)
		{
			pfc::string8_fast filename;
			if (uGetOpenFileName(m_hWnd, "Configuration files|*.cfg|All files|*.*", 0, "cfg", "Import from", nullptr, filename, FALSE))
			{
				g_config.import(helpers::read_file(filename));
				LoadProps();
			}
		}

		void OnPresetsBnClicked(UINT, int, HWND)
		{
			CMenu menu = CreatePopupMenu();

			uAppendMenu(menu, MF_STRING, IDR_BRIGHT, "Bright");
			uAppendMenu(menu, MF_STRING, IDR_DARK, "Dark");
			uAppendMenu(menu, MF_STRING, IDR_RUBY, "Ruby Blue");

			RECT rc;
			GetDlgItem(IDC_BTN_PRESETS).GetWindowRect(&rc);
			const int idx = TrackPopupMenu(menu, TPM_RIGHTBUTTON | TPM_NONOTIFY | TPM_RETURNCMD, rc.left, rc.bottom, 0, m_hWnd, nullptr);
			if (idx > 0)
			{
				g_config.load_preset(idx);
				LoadProps();
			}
		}

		void apply() override
		{
			m_callback->on_state_changed();
		}

		void reset() override
		{
			LoadProps(true);
		}

	private:
		bool listCanSelectItem(ctx_t, t_size) override
		{
			return false;
		}

		bool listIsColumnEditable(ctx_t, t_size sub_item) override
		{
			return sub_item == 1;
		}

		pfc::string8 listGetSubItemText(ctx_t, t_size item, t_size sub_item) override
		{
			switch (sub_item)
			{
			case 0:
				return g_config.m_data[item].key.get_ptr();
			case 1:
				return g_config.m_data[item].value.get_ptr();
			}
			return "";
		}

		t_size listGetItemCount(ctx_t) override
		{
			return g_config.m_data.size();
		}

		void listSetEditField(ctx_t, t_size item, t_size sub_item, const char* value) override
		{
			if (sub_item == 1)
			{
				g_config.m_data[item].value = value;
			}
		}

		void listSubItemClicked(ctx_t, t_size item, t_size sub_item) override
		{
			if (sub_item == 1)
			{
				m_props.TableEdit_Start(item, sub_item);
			}
		}

		CListControlOwnerData m_props;
		preferences_page_callback::ptr m_callback;
	};

	class my_preferences_page_impl : public preferences_page_impl<CDialogPref>
	{
	public:
		GUID get_guid() override
		{
			return jsp_guids::ui_pref;
		}

		GUID get_parent_guid() override
		{
			return preferences_page::guid_tools;
		}

		bool get_help_url(pfc::string_base& p_out) override
		{
			p_out = "https://marc2k3.github.io/foo_jscript_panel.html";
			return true;
		}

		const char* get_name() override
		{
			return JSP_NAME;
		}
	};

	FB2K_SERVICE_FACTORY(my_preferences_page_impl);
}
