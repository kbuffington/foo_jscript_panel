// Scintilla source code edit control
/** @file Lexilla.cxx
 ** Lexer infrastructure.
 ** Provides entry points to shared library.
 **/
// Copyright 2019 by Neil Hodgson <neilh@scintilla.org>
// The License.txt file describes the conditions under which this software may be distributed.

#include <cstring>

#include <vector>

#if _WIN32
#define EXPORT_FUNCTION __declspec(dllexport)
#else
#define EXPORT_FUNCTION __attribute__((visibility("default")))
#endif

#include "ILexer.h"

#include "LexerModule.h"
#include "CatalogueModules.h"

using namespace Scintilla;

//++Autogenerated -- run lexilla/LexillaGen.py to regenerate
//**\(extern LexerModule \*;\n\)
extern LexerModule lmCPP;
extern LexerModule lmCPPNoCase;

//--Autogenerated -- end of automatically generated section

namespace {

CatalogueModules catalogueLexilla;

void AddEachLexer() {

	if (catalogueLexilla.Count() > 0) {
		return;
	}

//++Autogenerated -- run scripts/LexGen.py to regenerate
//**\(\tcatalogueLexilla.AddLexerModule(&\*);\n\)
	catalogueLexilla.AddLexerModule(&lmCPP);
	catalogueLexilla.AddLexerModule(&lmCPPNoCase);

//--Autogenerated -- end of automatically generated section

}

}

extern "C" {

int EXPORT_FUNCTION GetLexerCount() {
	AddEachLexer();
	return catalogueLexilla.Count();
}

void EXPORT_FUNCTION GetLexerName(unsigned int index, char *name, int buflength) {
	AddEachLexer();
	*name = 0;
	const char *lexerName = catalogueLexilla.Name(index);
	if (static_cast<size_t>(buflength) > strlen(lexerName)) {
		strcpy(name, lexerName);
	}
}

LexerFactoryFunction EXPORT_FUNCTION GetLexerFactory(unsigned int index) {
	AddEachLexer();
	return catalogueLexilla.Factory(index);
}

ILexer5 EXPORT_FUNCTION *CreateLexer(const char *name) {
	AddEachLexer();
	for (unsigned int i = 0; i < catalogueLexilla.Count(); i++) {
		const char *lexerName = catalogueLexilla.Name(i);
		if (0 == strcmp(lexerName, name)) {
			return catalogueLexilla.Create(i);
		}
	}
	return nullptr;
}

}
